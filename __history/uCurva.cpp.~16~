// ---------------------------------------------------------------------------

#pragma hdrstop

#include "uCurva.h"
// ---------------------------------------------------------------------------
#pragma package(smart_init)

Curva::Curva() {
		mundo = Janela();
		vp = Janela();
	}

Curva::Curva(Janela mundo, Janela vp) {
		this->mundo = mundo;
		this->vp = vp;
	}

Poligono Curva::castejau(Poligono pol) {
		Poligono pAux;
		vector<Ponto>p;
		p.push_back(pol.pontos[0]);
		p.push_back(pol.pontos[1]);
		p.push_back(pol.pontos[2]);
		return pAux;
	}

Poligono Curva::hermite(Poligono pol) {
		Ponto R1, R4;
		Poligono curva;
		Ponto pontoCurva;
		double matrizAuxiliar[1][1];
		double Cx[4][1], Cy[4][1];
		double T[1][4];

		R1.x = pol.pontos[1].x - pol.pontos[0].x;
		R1.y = pol.pontos[1].y - pol.pontos[0].y;
		R4.x = pol.pontos[3].x - pol.pontos[2].x;
		R4.y = pol.pontos[3].y - pol.pontos[2].y;

		double matrizHermite[4][4] =
			{
					{2, -2, 1, 1},
					{-3, 3, -2, -1},
					{0, 0, 1, 0},
					{1, 0, 0, 0}
			};

		double matrizX[4][1] =
			{
					{pol.pontos[0].x},
					{pol.pontos[3].x},
					{R1.x},
					{R4.x}
			};

		double matrizY[4][1] =
			{
					{pol.pontos[0].y},
					{pol.pontos[3].y},
					{R1.y},
					{R4.y}
			};

		multiplicacaoMatrizCurvas(matrizHermite, matrizX, Cx, 4);
		multiplicacaoMatrizCurvas(matrizHermite, matrizY, Cy, 4);

		for (double t = 0; t <= 1; t += 0.01) {
				T[0][0] = {t*t*t};
				T[0][1] = {t*t};
				T[0][2] = {t};
				T[0][3] = 1;

				multiplicacaoMatrizCurvas(T, Cx, matrizAuxiliar, 1);
				pontoCurva.x = matrizAuxiliar[0][0];
				multiplicacaoMatrizCurvas(T, Cy, matrizAuxiliar, 1);
				pontoCurva.y = matrizAuxiliar[0][0];

				curva.pontos.push_back(pontoCurva);
			}
		return curva;
	}

void Curva::multiplicacaoMatrizCurvas(double matrizUm[][4],
	double matrizDois[4][1], double matrizAuxiliar[][1], int matrizUmLinha) {
		int i, k;
		int j = 0;

		for (i = 0; i < matrizUmLinha; ++i) {
				matrizAuxiliar[i][j] = 0;

				for (k = 0; k < 4; ++k) {
						matrizAuxiliar[i][j] +=
							matrizUm[i][k] * matrizDois[k][j];
					}
			}
	}

Poligono Curva::bezier(Poligono pol) {
		double xu = 0.0, yu = 0.0, u = 0.0;
		Poligono pAux;
		vector<Ponto>p;
		p.push_back(pol.pontos[0]);
		p.push_back(pol.pontos[1]);
		p.push_back(pol.pontos[2]);
		p.push_back(pol.pontos[3]);
		for (u = 0.0; u <= 1.0; u += 0.01)
			{
				xu = pow(1 - u, 3) * p[0].x + 3 * u * pow(1 - u, 2) * p[1].x +
					3 * pow(u, 2) * (1 - u) * p[2].x + pow(u, 3) * p[3].x;
				yu = pow(1 - u, 3) * p[0].y + 3 * u * pow(1 - u, 2) * p[1].y +
					3 * pow(u, 2) * (1 - u) * p[2].y + pow(u, 3) * p[3].y;
				pAux.pontos.push_back(Ponto(xu, yu));
			}
		return pAux;
	}

Poligono Curva::bspline(Poligono pol) {
		double xu = 0.0, yu = 0.0, t = 0.0;
		double t2, t3, mt3, bi3, bi2, bi1, bi;
		Poligono pAux;
		vector<Ponto>p;
		p.push_back(pol.pontos[0]);
		p.push_back(pol.pontos[1]);
		p.push_back(pol.pontos[2]);
		p.push_back(pol.pontos[3]);
		for (t = 3.0; t <= 6.0; t += 0.01)
			{
				t2 = t * t;
				t3 = t2 * t;
				mt3 = (1.0 - t) * (1.0 - t) * (1.0 - t);

				bi3 = mt3 / 6.0;
				bi2 = ((3.0 * t3) - (6.0 * t2) + 4.0) / 6.0;
				bi1 = ((-3.0 * t3) + (3.0 * t2) + (3.0 * t) + 1.0) / 6.0;
				bi = mt3 / 6.0;

				xu = p[0].x * bi3;
				xu += p[1].x * bi2;
				xu += p[2].x * bi1;
				xu += p[3].x * bi;

				yu = p[0].y * bi3;
				yu += p[1].y * bi2;
				yu += p[2].y * bi1;
				yu += p[3].y * bi;

				pAux.pontos.push_back(Ponto(xu, yu));
			}
		return pAux;
	}
