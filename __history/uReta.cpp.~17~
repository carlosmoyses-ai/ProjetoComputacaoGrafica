// ---------------------------------------------------------------------------

#pragma hdrstop

#include "uReta.h"

#define _ABS_(x) ((x < 0) ? -x : x)
#define _SIGN_(x) ((x < 0) ? -1 : 1)
// ---------------------------------------------------------------------------
#pragma package(smart_init)

Reta::Reta() {
		mundo = Janela();
		vp = Janela();
	}

Reta::Reta(Janela mundo, Janela vp) {
		this->mundo = mundo;
		this->vp = vp;
	}

void Reta::lineTo(TCanvas*canvas, vector<Ponto>pontos, TColor cor) {
		for (int x = 0; x < pontos.size(); x++) {
				canvas->Pen->Color = cor;

				if (x == 0) {
						canvas->MoveTo(
							pontos[x].xViewPortToMundo(mundo, vp),
							pontos[x].yViewPortToMundo(mundo, vp));
					}
				else {
						canvas->LineTo(
							pontos[x].xViewPortToMundo(mundo, vp),
							pontos[x].yViewPortToMundo(mundo, vp));
					}
			}
	}

void Reta::DDA(TCanvas*canvas, vector<Ponto>pontos, TColor cor) {
		double x, y, xs, ys;
		double dx, dy, steps;
		double px0, py0, px1, py1;

		for (int i = 1; i < pontos.size(); i++) {
				px0 = pontos[i - 1].xViewPortToMundo(mundo, vp);
				py0 = pontos[i - 1].yViewPortToMundo(mundo, vp);

				px1 = pontos[i].xViewPortToMundo(mundo, vp);
				py1 = pontos[i].yViewPortToMundo(mundo, vp);

				xs = abs(px1 - px0);
				ys = abs(py1 - py0);

				steps = (xs >= ys) ? xs : ys;

				dx = (xs > 0) ? (double)(px1 - px0) / steps :
					(double)(px1 - px0);
				dy = (ys > 0) ? (double)(py1 - py0) / steps :
					(double)(py1 - py0);

				x = px0 + 0.5 * _SIGN_(dx);
				y = py0 + 0.5 * _SIGN_(dy);

				int a = 0;
				canvas->Pixels[floor(x)][floor(y)] = cor;
				while (a < steps) {
						canvas->Pixels[floor(x)][floor(y)] = cor;
						x += dx;
						y += dy;
						a++;
					}
			}
	}

void Reta::bresenhamX(TCanvas*canvas, int dx, int dy, Ponto p0, Ponto p1,
	TColor cor) {
		int i, j, k;
		i = 2 * dy - dx;
		j = 2 * dy;
		k = 2 * (dy - dx);

		if (!(p0.x < p1.x)) {
				swap(p0.x, p1.x);
				swap(p0.y, p1.y);
			}
		canvas->Pixels[floor(p0.x)][floor(p0.y)] = cor;

		while (p0.x < p1.x) {
				if (i < 0) {
						i += j;
					}
				else {
						if (p0.y < p1.y) {
								++p0.y;
							}
						else {
								--p0.y;
							}
						i += k;
					}
				++p0.y;
				canvas->Pixels[floor(p0.x)][floor(p0.y)] = cor;
			}

	}

void Reta::bresenhamY(TCanvas*canvas, int dx, int dy, Ponto p0, Ponto p1,
	TColor cor) {
		int i, j, k;
		i = 2 * dx - dy;
		j = 2 * dx;
		k = 2 * (dx - dy);

		if (!(p0.y < p1.y)) {
				swap(p0.x, p1.x);
				swap(p0.y, p1.y);
			}
		canvas->Pixels[floor(p0.x)][floor(p0.y)] = cor;

		while (p0.y < p1.y) {
				if (i < 0) {
						i += j;
					}
				else {
						if (p0.x > p1.x) {
								--p0.x;
							}
						else {
								++p0.x;
							}
						i += k;
					}
				++p0.y;
				canvas->Pixels[floor(p0.x)][floor(p0.y)] = cor;
			}

	}

void Reta::bresenham(TCanvas*canvas, vector<Ponto>pontos, TColor cor) {
		double px0, py0, px1, py1;
		int dx, dy, p, x, y;
		int i, j, k;
		for (int i = 1; i < pontos.size(); i++) {
				px0 = pontos[i - 1].xViewPortToMundo(mundo, vp);
				py0 = pontos[i - 1].yViewPortToMundo(mundo, vp);

				px1 = pontos[i].xViewPortToMundo(mundo, vp);
				py1 = pontos[i].yViewPortToMundo(mundo, vp);

				dx = px1 - px0;
				dy = py1 - py0;

				x = px0;
				y = py0;

				p = 2 * dy - dx;

				while (x < px1)
					{
						if (p >= 0)
							{
								canvas->Pixels[floor(x)][floor(y)] = cor;
								y = y + 1;
								p = p + 2 * dy - 2 * dx;
							}
						else
							{
								canvas->Pixels[floor(x)][floor(y)] = cor;
								p = p + 2 * dy;
							}
						x = x + 1;
					}
			}
	}
